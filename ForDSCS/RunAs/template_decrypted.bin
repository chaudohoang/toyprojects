using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Security.Cryptography;
using System.Runtime.InteropServices;
using Microsoft.Win32;

namespace CreateProcessWithLogonW
{
    class Program
    {

        static void Main(string[] args)
        {
            string filepath, domain, user, pass;
            bool pathIsNetwork;

        
            filepath = @"nameholder";
            domain = "domainholder";
            user = "userholder";
            pass = "passholder";
            



            if (File.Exists(filepath))

            {

                pathIsNetwork = isNetworkPath(filepath);
                string hash = calcSHA256(filepath);
                bool allowed = false;

                string pcitems = @"pcitemsholder";
                using (var reader = new StringReader(pcitems)) { for (string line = reader.ReadLine(); line != null; line = reader.ReadLine()) { if (string.Equals(line, Environment.MachineName, StringComparison.OrdinalIgnoreCase)) allowed = true; } }
                
                if (hash == "hashholder" && allowed == true)


                    try
                    {
                        Console.WriteLine("Starting application . . .");
                        if (pathIsNetwork)
                        {
                            string tempfilepath = Path.GetTempPath() + Path.GetFileName(filepath);
                            if (!File.Exists(tempfilepath)) File.Copy(filepath, tempfilepath);
                            filepath = tempfilepath;
                        }
                        LaunchCommand1(filepath, domain, user, pass);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("LaunchCommand error: " + ex.Message);
                    }

                else Console.WriteLine("Incorrect application file or user has no permissions. . .");

            }
            else Console.WriteLine("Application not found or path is not absolute . . .");


            Console.ReadKey();

        }

        public static string calcSHA256(string filepath)
        {
            using (FileStream stream = File.OpenRead(filepath))
            {
                SHA256Managed sha = new SHA256Managed();
                byte[] checksum = sha.ComputeHash(stream);
                return BitConverter.ToString(checksum).Replace("-", String.Empty).ToLower();
            }
        }

        public static bool isNetworkPath(string path)
        {
            if (!path.StartsWith(@"/") && !path.StartsWith(@"\"))
            {
                string rootPath = System.IO.Path.GetPathRoot(path); // get drive's letter
                if (rootPath == "") return false;
                System.IO.DriveInfo driveInfo = new System.IO.DriveInfo(rootPath); // get info about the drive
                return driveInfo.DriveType == System.IO.DriveType.Network; // return true if a network drive
            }

            return true; // is a UNC path
        }


        #region "CONTS"


        const UInt32 INFINITE = 0xFFFFFFFF;

        const UInt32 WAIT_FAILED = 0xFFFFFFFF;


        #endregion


        #region "ENUMS"


        [Flags]

        public enum LogonType

        {

            LOGON32_LOGON_INTERACTIVE = 2,

            LOGON32_LOGON_NETWORK = 3,

            LOGON32_LOGON_BATCH = 4,

            LOGON32_LOGON_SERVICE = 5,

            LOGON32_LOGON_UNLOCK = 7,

            LOGON32_LOGON_NETWORK_CLEARTEXT = 8,

            LOGON32_LOGON_NEW_CREDENTIALS = 9

        }


        [Flags]

        public enum LogonProvider

        {

            LOGON32_PROVIDER_DEFAULT = 0,

            LOGON32_PROVIDER_WINNT35,

            LOGON32_PROVIDER_WINNT40,

            LOGON32_PROVIDER_WINNT50

        }


        #endregion


        #region "STRUCTS"


        [StructLayout(LayoutKind.Sequential)]

        public struct STARTUPINFO

        {

            public Int32 cb;

            public String lpReserved;

            public String lpDesktop;

            public String lpTitle;

            public Int32 dwX;

            public Int32 dwY;

            public Int32 dwXSize;

            public Int32 dwYSize;

            public Int32 dwXCountChars;

            public Int32 dwYCountChars;

            public Int32 dwFillAttribute;

            public Int32 dwFlags;

            public Int16 wShowWindow;

            public Int16 cbReserved2;

            public IntPtr lpReserved2;

            public IntPtr hStdInput;

            public IntPtr hStdOutput;

            public IntPtr hStdError;

        }


        [StructLayout(LayoutKind.Sequential)]

        public struct PROCESS_INFORMATION

        {

            public IntPtr hProcess;

            public IntPtr hThread;

            public Int32 dwProcessId;

            public Int32 dwThreadId;

        }


        #endregion


        #region "FUNCTIONS (P/INVOKE)"


        [DllImport("advapi32.dll", CharSet = CharSet.Unicode, SetLastError = true)]

        public static extern Boolean LogonUser

        (

            String lpszUserName,

            String lpszDomain,

            String lpszPassword,

            LogonType dwLogonType,

            LogonProvider dwLogonProvider,

            out IntPtr phToken

        );


        [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]

        public static extern Boolean CreateProcessAsUser

        (

            IntPtr hToken,

            String lpApplicationName,

            String lpCommandLine,

            IntPtr lpProcessAttributes,

            IntPtr lpThreadAttributes,

            Boolean bInheritHandles,

            Int32 dwCreationFlags,

            IntPtr lpEnvironment,

            String lpCurrentDirectory,

            ref STARTUPINFO lpStartupInfo,

            out PROCESS_INFORMATION lpProcessInformation

        );


        [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]

        public static extern Boolean CreateProcessWithLogonW

        (

            String lpszUsername,

            String lpszDomain,

            String lpszPassword,

            Int32 dwLogonFlags,

            String applicationName,

            String commandLine,

            Int32 creationFlags,

            IntPtr environment,

            String currentDirectory,

            ref STARTUPINFO sui,

            out PROCESS_INFORMATION processInfo

        );


        [DllImport("kernel32.dll", SetLastError = true)]

        public static extern UInt32 WaitForSingleObject

        (

            IntPtr hHandle,

            UInt32 dwMilliseconds

        );


        [DllImport("kernel32", SetLastError = true)]

        public static extern Boolean CloseHandle(IntPtr handle);


        #endregion


        #region "FUNCTIONS"


        public static void LaunchCommand1(string strCommand, string strDomain, string strName, string strPassword)

        {

            // Variables

            PROCESS_INFORMATION processInfo = new PROCESS_INFORMATION();

            STARTUPINFO startInfo = new STARTUPINFO();

            bool bResult = false;

            UInt32 uiResultWait = WAIT_FAILED;


            try

            {

                // Create process

                startInfo.cb = Marshal.SizeOf(startInfo);


                bResult = CreateProcessWithLogonW(

                    strName,

                    strDomain,

                    strPassword,

                    0,

                    null,

                    strCommand,

                    0,

                    IntPtr.Zero,

                    null,

                    ref startInfo,

                    out processInfo

                );

                if (!bResult)
                {
                    throw new Exception("CreateProcessWithLogonW error #" + Marshal.GetLastWin32Error().ToString());
                }


                //// Wait for process to end

                //uiResultWait = WaitForSingleObject(processInfo.hProcess, INFINITE);

                //if (uiResultWait == WAIT_FAILED)
                //{
                //    throw new Exception("WaitForSingleObject error #" + Marshal.GetLastWin32Error());
                //}


            }

            finally

            {

                // Close all handles

                CloseHandle(processInfo.hProcess);

                CloseHandle(processInfo.hThread);

            }

        }


        #endregion
    }
}
